jQuery(document).ready(function($){

    /**
     * Amarkal namespace
     */
    function Amarkal() {}

/**
 * Implements an options page notifier.
 */
Amarkal.Notifier  = {};

/**
 * @param {Node} top Initial distance from top
 */
Amarkal.Notifier.top = 32;

/**
 * @param {Node} notifications List of active notifications
 */
Amarkal.Notifier.notifications = [];

/**
 * Show a notification box of type 'type' with the message 'message'
 * 
 * @param {string} message
 * @param {string} type
 */
Amarkal.Notifier.notify = function( message, type )
{
   var wrapper  = document.createElement('div');
   var p        = document.createElement('p');
   var button   = document.createElement('div');

   wrapper.setAttribute('class', 'ao-notification notifier-' + type);
   button.setAttribute('class', 'ao-notification-button fa fa-times');
   wrapper.appendChild(p);
   wrapper.appendChild(button);
   p.innerHTML = message;

   $(button).click(function()
   {
       Amarkal.Notifier.removeNotification( wrapper );
   });

   $(wrapper).css({top: Amarkal.Notifier.top + 'px'});
   $('.amarkal-options').append(wrapper);

   Amarkal.Notifier.top += $(wrapper).outerHeight() + 10;
   Amarkal.Notifier.notifications.push(wrapper);
};

/**
 * Show a notification box of type 'success' with the message 'message'
 * 
 * @param {string} message
 */
Amarkal.Notifier.success = function( message )
{
   Amarkal.Notifier.notify( message, 'success' );
};

/**
 * Show a notification box of type 'error' with the message 'message'
 * 
 * @param {string} message
 */
Amarkal.Notifier.error = function( message )
{
   Amarkal.Notifier.notify( message, 'error' );
};

/**
 * Remove a notification box
 * 
 * @param {Node} wrapper
 */
Amarkal.Notifier.removeNotification = function( wrapper )
{
   var pos = Amarkal.Notifier.notifications.indexOf(wrapper);
   var height = $(wrapper).outerHeight() + 10;

   Amarkal.Notifier.top -= height;
   wrapper.parentNode.removeChild(wrapper);
   Amarkal.Notifier.notifications.splice(pos,1);

   for(;pos < Amarkal.Notifier.notifications.length; pos++)
   {
       $(Amarkal.Notifier.notifications[pos]).animate({top: '-=' + height});
   }
};

    
/**
 * Amarkal Options framework front end controller.
 */
Amarkal.Options   = {};

Amarkal.Options.formID = 'ao-form';

Amarkal.Options.init = function()
{   
    // Initiate sections
    Amarkal.Options.Sections.init();

    // Form control buttons
    $('.form-control-button').click(function(e){
        e.preventDefault();
        e.stopPropagation();
        Amarkal.Options[$(this).attr('data-action')]();
    });
    
    // Display notifications
    var notifications = Amarkal.Options.State.get('notifications');
    for( var i = 0; i < notifications.length && notifications; i++ )
    {
        Amarkal.Notifier.notify( notifications[i].message, notifications[i].type );
    }

    // Control menu toggle
    $('.amarkal-options .append-control-menu').click(function(e){
        e.preventDefault();
        e.stopPropagation();
        if( !$(this).parent().hasClass('active') )
        {
            $('.form-control-button').removeClass('active');
            $(this).parent().toggleClass('active');
        }
        else
        {
            $('.form-control-button').removeClass('active');
        }
    });
};

Amarkal.Options.save = function()
{
    Amarkal.Options.State.set( 'action', 'save' );
    Amarkal.Options.submit();
};

Amarkal.Options.reset = function()
{
    Amarkal.Options.State.set( 'action', 'reset-all' );
    Amarkal.Options.submit();
};

Amarkal.Options.resetSection = function()
{
    Amarkal.Options.State.set( 'action', 'reset-section' );
    Amarkal.Options.submit();
};

Amarkal.Options.export = function()
{
    Amarkal.Notifier.success('This feature is not yet implemented.');
};

Amarkal.Options.exportAs = function()
{
    Amarkal.Notifier.success('This feature is not yet implemented.');
};

Amarkal.Options.import = function()
{
    Amarkal.Notifier.success('This feature is not yet implemented.');
};

Amarkal.Options.submit = function()
{
    $('#'+Amarkal.Options.formID).submit();
};

/**
 * Implements an options page section.
 * 
 * @param {string} id The section id
 */
Amarkal.Options.Section = function( id )
{
    this.id         = id;
    this.button     = $('[data-section="'+this.id+'"]');
    this.triangleEl = $('<i class="fa fa-exclamation-triangle"></i>');
    this.circleEl   = $('<span class="number"></span>');
    this.noticePanel= $('#'+id).find('.section-notifications');
    this.notices    = [];
    this.updated    = []; // List of updated field ids
    this.subsections= []; // List of subsection ids (if exists)

    this.init();
};

/**
 * Initiate the section.
 */
Amarkal.Options.Section.prototype.init = function()
{
    this.button.append(this.triangleEl, this.circleEl);
    this.circleEl.hide();
    this.triangleEl.hide();
    var self = this;

    // Listen to change events on all inputs
    $('#'+this.id).find('.field-wrapper').change(function(){
        $(this).addClass('field-updated');
        self.updated.push($(this).attr('for'));
        $.unique(self.updated);
        self.circleEl.text(self.updated.length);
        self.circleEl.show();
    });

    // Check for subsections
    $('#'+this.id+' .sub-menu a').each(function(){      
        $(this).click(function(e){
            e.preventDefault();
            self.hideAllSubsections();
            self.showSubsection($(this).attr('href'));
        });
        self.subsections.push($(this).attr('href'));
    });

    // Show the first subsection
    this.hideAllSubsections();
    this.showSubsection( this.subsections[0] );
};

/**
 * Show this section.
 * This function does not hide other sections.
 */
Amarkal.Options.Section.prototype.show = function()
{
    Amarkal.Options.State.set( 'active_section', this.id );
    this.button.addClass('active');
    $('#'+this.id).show();
};

/**
 * Hide this section.
 */
Amarkal.Options.Section.prototype.hide = function()
{
    this.button.removeClass('active');
    $('#'+this.id).hide();
};

/**
 * Show the subsection with the given ID.
 * 
 * @param {string} id The subsection id.
 */
Amarkal.Options.Section.prototype.showSubsection = function( id )
{
    $('[href="'+id+'"]').addClass('active');
    $('[data-subsection="'+id+'"]').show();
};

/**
 * Hide all subsections for this section. 
 * Pretty self explanatory, isn't it?
 */
Amarkal.Options.Section.prototype.hideAllSubsections = function()
{
    $('#'+this.id+' .sub-menu a').each(function(){
        $(this).removeClass('active');
        $('[data-subsection="'+$(this).attr('href')+'"]').hide();
    });
};

/**
 * Add a notification for this section.
 * 
 * @param {string} message The message to show in the notification.
 */
Amarkal.Options.Section.prototype.addNotification = function( message )
{
    this.notices.push( message );
    this.triangleEl.show();
    var html = '';
    for( var i = 0; i < this.notices.length; i++ )
    {
        html += '<p>'+this.notices[i]+'</p>';
    }
    this.noticePanel.html(html);
};

/**
 * Clear all notifications for this section.
 */
Amarkal.Options.Section.prototype.clearNotifications = function()
{
    this.triangleEl.hide();
    this.notices = [];
};
/**
 * Static class that provides control over the option page sections.
 */
Amarkal.Options.Sections = {};

/**
 * List of Section objects representing all sections.
 * @type Section[]
 */
Amarkal.Options.Sections.sectionList = [];

/**
 * Initiate the sections of the options page.
 */
Amarkal.Options.Sections.init = function()
{
    // Generate sections
    $('.amarkal-options .section').each(function(){
        var section = new Amarkal.Options.Section( $(this).attr('id') );

        Amarkal.Options.Sections.sectionList.push( section );

        section.hide();
        if( section.id === Amarkal.Options.State.get('active_section') )
        {
            section.show();
        }
    });

    // Click event for section buttons
    $('[data-section]').click(function(e){
        e.preventDefault();
        Amarkal.Options.Sections.hideAll();
        Amarkal.Options.Sections.getByID( $(this).attr('data-section') ).show();

        // Change the form's action
        $('#'+Amarkal.Options.formID).attr('action', $(this).attr('href'));
    });
};

/**
 * Get a section by its ID (not including the # sign).
 * 
 * @param {string} sectionId
 * @returns {Amarkal.Options.Sections.getSection.section}
 */
Amarkal.Options.Sections.getByID = function( sectionId )
{
    for( var i = 0; i < Amarkal.Options.Sections.sectionList.length; i++ )
    {
        var section = Amarkal.Options.Sections.sectionList[i];
        if( section.id === sectionId )
        {
            return section;
        }
    }
};

/**
 * Hide all sections
 */
Amarkal.Options.Sections.hideAll = function()
{
    for( var i = 0; i < Amarkal.Options.Sections.sectionList.length; i++ )
    {
        Amarkal.Options.Sections.sectionList[i].hide();
    }
};
/**
 * A static object holding the current state for the options page.
 * 
 * The state object holds information about the current state (e.g. active section, 
 * action type etc...) and is used for communications between the front end 
 * and the back end.
 * 
 * The state data is stored as a json string to the input value with the id
 * #options-state
 */
Amarkal.Options.State = {};

/**
 * The id of the input element.
 * @type String
 */
Amarkal.Options.State.inputID = 'options-state';

/**
 * Holds current state data.
 */
Amarkal.Options.State.data = $.parseJSON( $('#'+Amarkal.Options.State.inputID).val() );

/**
 * Set a state parameter.
 * 
 * @param {string} param
 * @param {mixed} value
 */
Amarkal.Options.State.set = function( param, value )
{
    Amarkal.Options.State.data[param] = value;
    Amarkal.Options.State.update();
};

/**
 * Get a state parameter.
 * 
 * @param {string} param
 * @returns {mixed}
 */
Amarkal.Options.State.get = function( param )
{
    var data = Amarkal.Options.State.data;
    if( null !== data && data.hasOwnProperty(param) )
    {
        return data[param];
    }
    return false;
};

/**
 * Update the state object.
 */
Amarkal.Options.State.update = function()
{
    $('#options-state').val(JSON.stringify(Amarkal.Options.State.data));
};

jQuery(document).ready(function($) { 
    $(".ao-field-dropdown select")
        .select2({width:'resolve'})
        .change(function(){
            // Fire change event
            $(this).parents('.field-wrapper').trigger('change');
    });
});
jQuery(document).ready(function($){
    $('.ao-field-slider').each(function(){
        
        var max = parseInt( $(this).attr('data-max') );
        var min = parseInt( $(this).attr('data-min') );
        var step = parseInt( $(this).attr('data-step') );
        var type = $(this).attr('data-type');
        var disabled = $(this).attr('disabled');
        
        if( type === 'range' )
        {
            var inputs = $(this).find('input');
            
            $(this).children('.slider').slider({
                min: min,
                max: max,
                step: step,
                range: true,
                disabled: disabled,
                values: [ parseInt( inputs[0].value ), parseInt( inputs[1].value )],
                slide: function( event, ui ) {
                    inputs[0].value = ui.values[0];
                    inputs[1].value = ui.values[1];
                    $(this).parents('.field-wrapper').trigger('change');
                }
            });
        }
        else
        {
            var input = $(this).find('input');
            
            $(this).children('.slider').slider({
                min: min,
                max: max,
                step: step,
                range: type,
                disabled: disabled,
                value: parseInt( input.val() ),
                slide: function( event, ui ) {
                    input.val( ui.value );
                    $(this).parents('.field-wrapper').trigger('change');
                }
            });
        }
        
        $(this).find('.ui-slider-handle').html('<i class="fa fa-navicon fa-rotate-90"></i>');
    });
});
jQuery(document).ready(function($){
    $('.ao-field-spinner').each(function(){
        var input = $(this).find('input');
        var maxvalue = input.attr('data-maxvalue');
        var minvalue = input.attr('data-minvalue');
        var step = input.attr('data-step');
        var disabled = input.attr('disabled');
        
        input.spinner({
            min: minvalue,
            max: maxvalue,
            step: step,
            disabled: disabled
        });
        
        $(this).find('.ui-spinner-down').detach().insertBefore(input);
        $(this).find('.ui-spinner-up').html('<i class="fa fa-chevron-right"></i>')
        $(this).find('.ui-spinner-down').html('<i class="fa fa-chevron-left"></i>');
        
        // Fire change event
        $(this).find('.ui-spinner-button').click(function(){
            $(this).parents('.field-wrapper').trigger('change');
        });
    });
});
jQuery(document).ready(function($){
    $('.ao-field-switcher').children('label').click(function()
    {
        var value = [];
        var parent = $(this).parent();
        var input = parent.children('input');
        var disabled = input.attr('disabled');
        
        if( !disabled )
        {
            if(parent.hasClass('singlevalue'))
            {
                parent.find('label').removeClass('active');
            }
            $(this).toggleClass('active');
        }
        
        parent.find('.active').each(function(){
            value.push( $(this).attr('data-value') );
        });
        
        input.val(value);
        
        // Fire change event
        $(this).parents('.field-wrapper').trigger('change');
    });
});
jQuery(document).ready(function($){
    // Fire change event
    $('.ao-field-input input').change(function(){
        $(this).parents('.field-wrapper').trigger('change');
    });
});
jQuery(document).ready(function($){
    $('.ao-field-textarea textarea').resizable({
        minHeight: 150,
        minWidth: 250
    });
    $('.ui-resizable-s').html('<i class="fa fa-bars"></i>');
    $('.ui-resizable-e').html('<i class="fa fa-bars fa-rotate-90"></i>');
    
    // Fire change event
    $('.ao-field-textarea textarea').change(function(){
        $(this).parents('.field-wrapper').trigger('change');
    });
});
/**
 * Amarkal Widget framework
 */
Amarkal.Widget    = {};
// 
// Trigger an event after widget save/drag/load.
// @see http://wordpress.stackexchange.com/questions/5515/update-widget-form-after-drag-and-drop-wp-save-bug
$(document).trigger('widget_init');

$( document ).ajaxComplete( function( event, XMLHttpRequest, ajaxOptions ) {
    var request = {}, pairs = ajaxOptions.data.split('&'), i, split, widget;
    for( i in pairs ) {
            split = pairs[i].split( '=' );
            request[decodeURIComponent( split[0] )] = decodeURIComponent( split[1] );
    }

    if( request.action && ( request.action === 'save-widget' ) ) 
    {
        widget = $('input.widget-id[value="' + request['widget-id'] + '"]').parents('.widget');
        if( !XMLHttpRequest.responseText )
        {
            wpWidgets.save(widget, 0, 1, 0);
        }
        else
        {
            $(document).trigger('widget_init', widget);
        }
    }
});

// Set tooltips on widgets
$(document).bind('widget_init', function(event, widget){
    $('[data-type="error"]').tooltip({
        template: '<div class="tooltip tooltip-error"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>'
    });
    $('[data-type="help"]').tooltip({
        delay: { show: 0, hide: 250 }
    });
});


/**
 * ColorPicker component
 */
(function ($) {  
    // Fired when the widget is updated (saved/dragged/refreshed)
	$(document).bind('widget_init', function(event, widget){
		// Bind color picker
		$('.amarkal-widget.colorpicker input').wpColorPicker();
		$('.amarkal-widget.colorpicker.disabled').find('.wp-color-result').unbind( "click" );
	});
}(jQuery));
/**
 * DatePicker component
 */
(function ($) {  
    // Fired when the widget is updated (saved/dragged/refreshed)
	$(document).bind('widget_init', function(event, widget){
		// Bind date picker
		$('.amarkal-widget.datepicker input').datepicker();
		$('.datepicker-button').click(function(){
			var dp = $(this).parent().find('input');
			if ( dp.datepicker('widget').is(':visible')) {
				dp.datepicker('hide');
			}
			else {
				dp.datepicker('show');
			}
		});
		$('.amarkal-widget.datepicker.disabled input').datepicker('disable');
	});
}(jQuery));
/**
 * Select component
 */
(function ($) {  
    // Fired when the widget is updated (saved/dragged/refreshed)
	$(document).bind('widget_init', function(event, widget){
        $(".amarkal-widget.select select").select2({width:'resolve'});
	});
}(jQuery));

    Amarkal.Options.init();
});

