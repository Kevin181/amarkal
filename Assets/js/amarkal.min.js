/* ========================================================================
 * Bootstrap: transition.js v3.3.2
 * http://getbootstrap.com/javascript/#transitions
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
  // ============================================================

  function transitionEnd() {
    var el = document.createElement('bootstrap')

    var transEndEventNames = {
      WebkitTransition : 'webkitTransitionEnd',
      MozTransition    : 'transitionend',
      OTransition      : 'oTransitionEnd otransitionend',
      transition       : 'transitionend'
    }

    for (var name in transEndEventNames) {
      if (el.style[name] !== undefined) {
        return { end: transEndEventNames[name] }
      }
    }

    return false // explicit for ie8 (  ._.)
  }

  // http://blog.alexmaccaw.com/css-transitions
  $.fn.emulateTransitionEnd = function (duration) {
    var called = false
    var $el = this
    $(this).one('bsTransitionEnd', function () { called = true })
    var callback = function () { if (!called) $($el).trigger($.support.transition.end) }
    setTimeout(callback, duration)
    return this
  }

  $(function () {
    $.support.transition = transitionEnd()

    if (!$.support.transition) return

    $.event.special.bsTransitionEnd = {
      bindType: $.support.transition.end,
      delegateType: $.support.transition.end,
      handle: function (e) {
        if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)
      }
    }
  })

}(jQuery);
/* ========================================================================
 * Bootstrap: tooltip.js v3.3.4
 * http://getbootstrap.com/javascript/#tooltip
 * Inspired by the original jQuery.tipsy by Jason Frame
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


(function ($) {
  'use strict';

  // TOOLTIP PUBLIC CLASS DEFINITION
  // ===============================

  var Tooltip = function (element, options) {
    this.type       = null;
    this.options    = null;
    this.enabled    = null;
    this.timeout    = null;
    this.hoverState = null;
    this.$element   = null;

    this.init('tooltip', element, options);
  };

  Tooltip.VERSION  = '3.3.4';

  Tooltip.TRANSITION_DURATION = 150;

  Tooltip.DEFAULTS = {
    animation: true,
    placement: 'top',
    selector: false,
    template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
    trigger: 'hover focus',
    title: '',
    delay: 0,
    html: false,
    container: false,
    viewport: {
      selector: 'body',
      padding: 0
    }
  };

  Tooltip.prototype.init = function (type, element, options) {
    this.enabled   = true
    this.type      = type
    this.$element  = $(element)
    this.options   = this.getOptions(options)
    this.$viewport = this.options.viewport && $($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : (this.options.viewport.selector || this.options.viewport))

    if (this.$element[0] instanceof document.constructor && !this.options.selector) {
      throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!')
    }

    var triggers = this.options.trigger.split(' ')

    for (var i = triggers.length; i--;) {
      var trigger = triggers[i]

      if (trigger == 'click') {
        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))
      } else if (trigger != 'manual') {
        var eventIn  = trigger == 'hover' ? 'mouseenter' : 'focusin'
        var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout'

        this.$element.on(eventIn  + '.' + this.type, this.options.selector, $.proxy(this.enter, this))
        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))
      }
    }

    this.options.selector ?
      (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :
      this.fixTitle()
  }

  Tooltip.prototype.getDefaults = function () {
    return Tooltip.DEFAULTS
  }

  Tooltip.prototype.getOptions = function (options) {
    options = $.extend({}, this.getDefaults(), this.$element.data(), options)

    if (options.delay && typeof options.delay == 'number') {
      options.delay = {
        show: options.delay,
        hide: options.delay
      }
    }

    return options
  }

  Tooltip.prototype.getDelegateOptions = function () {
    var options  = {}
    var defaults = this.getDefaults()

    this._options && $.each(this._options, function (key, value) {
      if (defaults[key] != value) options[key] = value
    })

    return options
  }

  Tooltip.prototype.enter = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget).data('bs.' + this.type)

    if (self && self.$tip && self.$tip.is(':visible')) {
      self.hoverState = 'in'
      return
    }

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
      $(obj.currentTarget).data('bs.' + this.type, self)
    }

    clearTimeout(self.timeout)

    self.hoverState = 'in'

    if (!self.options.delay || !self.options.delay.show) return self.show()

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'in') self.show()
    }, self.options.delay.show)
  }

  Tooltip.prototype.leave = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget).data('bs.' + this.type)

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
      $(obj.currentTarget).data('bs.' + this.type, self)
    }

    clearTimeout(self.timeout)

    self.hoverState = 'out'

    if (!self.options.delay || !self.options.delay.hide) return self.hide()

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'out') self.hide()
    }, self.options.delay.hide)
  }

  Tooltip.prototype.show = function () {
    var e = $.Event('show.bs.' + this.type)

    if (this.hasContent() && this.enabled) {
      this.$element.trigger(e)

      var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0])
      if (e.isDefaultPrevented() || !inDom) return
      var that = this

      var $tip = this.tip()

      var tipId = this.getUID(this.type)

      this.setContent()
      $tip.attr('id', tipId)
      this.$element.attr('aria-describedby', tipId)

      if (this.options.animation) $tip.addClass('fade')

      var placement = typeof this.options.placement == 'function' ?
        this.options.placement.call(this, $tip[0], this.$element[0]) :
        this.options.placement

      var autoToken = /\s?auto?\s?/i
      var autoPlace = autoToken.test(placement)
      if (autoPlace) placement = placement.replace(autoToken, '') || 'top'

      $tip
        .detach()
        .css({ top: 0, left: 0, display: 'block' })
        .addClass(placement)
        .data('bs.' + this.type, this)

      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)
      this.$element.trigger('inserted.bs.' + this.type)

      var pos          = this.getPosition()
      var actualWidth  = $tip[0].offsetWidth
      var actualHeight = $tip[0].offsetHeight

      if (autoPlace) {
        var orgPlacement = placement
        var viewportDim = this.getPosition(this.$viewport)

        placement = placement == 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top'    :
                    placement == 'top'    && pos.top    - actualHeight < viewportDim.top    ? 'bottom' :
                    placement == 'right'  && pos.right  + actualWidth  > viewportDim.width  ? 'left'   :
                    placement == 'left'   && pos.left   - actualWidth  < viewportDim.left   ? 'right'  :
                    placement

        $tip
          .removeClass(orgPlacement)
          .addClass(placement)
      }

      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight);

      this.applyPlacement(calculatedOffset, placement);

      var complete = function () {
        var prevHoverState = that.hoverState
        that.$element.trigger('shown.bs.' + that.type)
        that.hoverState = null

        if (prevHoverState == 'out') that.leave(that);
      }

      $.support.transition && this.$tip.hasClass('fade') ?
        $tip
          .one('bsTransitionEnd', complete)
          .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
        complete()
    }
  }

  Tooltip.prototype.applyPlacement = function (offset, placement) {
    var $tip   = this.tip()
    var width  = $tip[0].offsetWidth
    var height = $tip[0].offsetHeight

    // manually read margins because getBoundingClientRect includes difference
    var marginTop = parseInt($tip.css('margin-top'), 10)
    var marginLeft = parseInt($tip.css('margin-left'), 10)

    // we must check for NaN for ie 8/9
    if (isNaN(marginTop))  marginTop  = 0
    if (isNaN(marginLeft)) marginLeft = 0

    offset.top  = offset.top  + marginTop
    offset.left = offset.left + marginLeft

    // $.fn.offset doesn't round pixel values
    // so we use setOffset directly with our own function B-0
    $.offset.setOffset($tip[0], $.extend({
      using: function (props) {
        $tip.css({
          top: Math.round(props.top),
          left: Math.round(props.left)
        })
      }
    }, offset), 0)

    $tip.addClass('in')

    // check to see if placing tip in new offset caused the tip to resize itself
    var actualWidth  = $tip[0].offsetWidth
    var actualHeight = $tip[0].offsetHeight

    if (placement == 'top' && actualHeight != height) {
      offset.top = offset.top + height - actualHeight
    }

    var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight)

    if (delta.left) offset.left += delta.left
    else offset.top += delta.top

    var isVertical          = /top|bottom/.test(placement)
    var arrowDelta          = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight
    var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight'

    $tip.offset(offset)
    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical)
  }

  Tooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {
    this.arrow()
      .css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')
      .css(isVertical ? 'top' : 'left', '')
  }

  Tooltip.prototype.setContent = function () {
    var $tip  = this.tip()
    var title = this.getTitle()

    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title)
    $tip.removeClass('fade in top bottom left right')
  }

  Tooltip.prototype.hide = function (callback) {
    var that = this
    var $tip = $(this.$tip)
    var e    = $.Event('hide.bs.' + this.type)

    function complete() {
      if (that.hoverState != 'in') $tip.detach()
      that.$element
        .removeAttr('aria-describedby')
        .trigger('hidden.bs.' + that.type)
      callback && callback()
    }

    this.$element.trigger(e)

    if (e.isDefaultPrevented()) return

    $tip.removeClass('in')

    $.support.transition && $tip.hasClass('fade') ?
      $tip
        .one('bsTransitionEnd', complete)
        .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
      complete()

    this.hoverState = null

    return this
  }

  Tooltip.prototype.fixTitle = function () {
    var $e = this.$element
    if ($e.attr('title') || typeof ($e.attr('data-original-title')) != 'string') {
      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')
    }
  }

  Tooltip.prototype.hasContent = function () {
    return this.getTitle()
  }

  Tooltip.prototype.getPosition = function ($element) {
    $element   = $element || this.$element

    var el     = $element[0]
    var isBody = el.tagName == 'BODY'

    var elRect    = el.getBoundingClientRect()
    if (elRect.width == null) {
      // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093
      elRect = $.extend({}, elRect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top })
    }
    var elOffset  = isBody ? { top: 0, left: 0 } : $element.offset()
    var scroll    = { scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop() }
    var outerDims = isBody ? { width: $(window).width(), height: $(window).height() } : null

    return $.extend({}, elRect, scroll, outerDims, elOffset)
  }

  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
    return placement == 'bottom' ? { top: pos.top + pos.height,   left: pos.left + pos.width / 2 - actualWidth / 2 } :
           placement == 'top'    ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2 } :
           placement == 'left'   ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :
        /* placement == 'right' */ { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width }

  }

  Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {
    var delta = { top: 0, left: 0 }
    if (!this.$viewport) return delta

    var viewportPadding = this.options.viewport && this.options.viewport.padding || 0
    var viewportDimensions = this.getPosition(this.$viewport)

    if (/right|left/.test(placement)) {
      var topEdgeOffset    = pos.top - viewportPadding - viewportDimensions.scroll
      var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight
      if (topEdgeOffset < viewportDimensions.top) { // top overflow
        delta.top = viewportDimensions.top - topEdgeOffset
      } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow
        delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset
      }
    } else {
      var leftEdgeOffset  = pos.left - viewportPadding
      var rightEdgeOffset = pos.left + viewportPadding + actualWidth
      if (leftEdgeOffset < viewportDimensions.left) { // left overflow
        delta.left = viewportDimensions.left - leftEdgeOffset
      } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow
        delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset
      }
    }

    return delta
  }

  Tooltip.prototype.getTitle = function () {
    var title
    var $e = this.$element
    var o  = this.options

    title = $e.attr('data-original-title')
      || (typeof o.title == 'function' ? o.title.call($e[0]) :  o.title)

    return title
  }

  Tooltip.prototype.getUID = function (prefix) {
    do prefix += ~~(Math.random() * 1000000)
    while (document.getElementById(prefix))
    return prefix
  }

  Tooltip.prototype.tip = function () {
    if (!this.$tip) {
      this.$tip = $(this.options.template)
      if (this.$tip.length != 1) {
        throw new Error(this.type + ' `template` option must consist of exactly 1 top-level element!')
      }
    }
    return this.$tip
  }

  Tooltip.prototype.arrow = function () {
    return (this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow'))
  }

  Tooltip.prototype.enable = function () {
    this.enabled = true
  }

  Tooltip.prototype.disable = function () {
    this.enabled = false
  }

  Tooltip.prototype.toggleEnabled = function () {
    this.enabled = !this.enabled
  }

  Tooltip.prototype.toggle = function (e) {
    var self = this
    if (e) {
      self = $(e.currentTarget).data('bs.' + this.type)
      if (!self) {
        self = new this.constructor(e.currentTarget, this.getDelegateOptions())
        $(e.currentTarget).data('bs.' + this.type, self)
      }
    }

    self.tip().hasClass('in') ? self.leave(self) : self.enter(self)
  }

  Tooltip.prototype.destroy = function () {
    var that = this
    clearTimeout(this.timeout)
    this.hide(function () {
      that.$element.off('.' + that.type).removeData('bs.' + that.type)
      if (that.$tip) {
        that.$tip.detach()
      }
      that.$tip = null
      that.$arrow = null
      that.$viewport = null
    })
  }


  // TOOLTIP PLUGIN DEFINITION
  // =========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.tooltip')
      var options = typeof option == 'object' && option

      if (!data && /destroy|hide/.test(option)) return
      if (!data) $this.data('bs.tooltip', (data = new Tooltip(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.tooltip

  $.fn.tooltip             = Plugin
  $.fn.tooltip.Constructor = Tooltip


  // TOOLTIP NO CONFLICT
  // ===================

  $.fn.tooltip.noConflict = function () {
    $.fn.tooltip = old
    return this
  }

}(jQuery));
/**
 * Amarkal namespace
 */
function Amarkal() {}
    
jQuery(document).ready(function($){ 

/**
 * Utility namespace
 */
Amarkal.Utility = function() {};



/**
 * Replace an array of patterns.
 * NOTE: Order DOES matter!
 * 
 * @param {array} patterns An array of 2 element arrays of [ pattern, replacement ]
 * @param {string} string
 * @returns {string} reformatted string
 */
Amarkal.Utility.arrayReplace = function( patterns, string )
{
   var result = string;
   for( var i = 0; i < patterns.length; i++ )
   {
       result = result.replace( patterns[i][0], patterns[i][1] );
   }
   return result;
};

/**
 * Merge the contents of two objects together into a single object, overwriting
 * the properties of the first objects with those of the second.
 * 
 * Note: This function preserves both original objects.
 * 
 * @param {Object} obj1
 * @param {Object} obj2
 * @returns {Object}
 */
Amarkal.Utility.extend = function( obj1, obj2 )
{
    return $.extend({}, obj1, obj2);
};
/**
 * Implements an options page notifier.
 */
Amarkal.Notifier  = {};

/**
 * @param {Node} top Initial distance from top
 */
Amarkal.Notifier.top = 32;

/**
 * @param {Node} notifications List of active notifications
 */
Amarkal.Notifier.notifications = [];

/**
 * Show a notification box of type 'type' with the message 'message'
 * 
 * @param {string} message
 * @param {string} type
 */
Amarkal.Notifier.notify = function( message, type )
{
   var wrapper  = document.createElement('div');
   var p        = document.createElement('p');
   var button   = document.createElement('div');

   wrapper.setAttribute('class', 'ao-notification notifier-' + type);
   button.setAttribute('class', 'ao-notification-button fa fa-times');
   wrapper.appendChild(p);
   wrapper.appendChild(button);
   p.innerHTML = message;

   $(button).click(function()
   {
       Amarkal.Notifier.removeNotification( wrapper );
   });

   $(wrapper).css({top: Amarkal.Notifier.top + 'px'});
   $('.amarkal-options').append(wrapper);

   Amarkal.Notifier.top += $(wrapper).outerHeight() + 10;
   Amarkal.Notifier.notifications.push(wrapper);
};

/**
 * Show a notification box of type 'success' with the message 'message'
 * 
 * @param {string} message
 */
Amarkal.Notifier.success = function( message )
{
   Amarkal.Notifier.notify( message, 'success' );
};

/**
 * Show a notification box of type 'error' with the message 'message'
 * 
 * @param {string} message
 */
Amarkal.Notifier.error = function( message )
{
   Amarkal.Notifier.notify( message, 'error' );
};

/**
 * Remove a notification box
 * 
 * @param {Node} wrapper
 */
Amarkal.Notifier.removeNotification = function( wrapper )
{
   var pos = Amarkal.Notifier.notifications.indexOf(wrapper);
   var height = $(wrapper).outerHeight() + 10;

   Amarkal.Notifier.top -= height;
   wrapper.parentNode.removeChild(wrapper);
   Amarkal.Notifier.notifications.splice(pos,1);

   for(;pos < Amarkal.Notifier.notifications.length; pos++)
   {
       $(Amarkal.Notifier.notifications[pos]).animate({top: '-=' + height});
   }
};

    
/**
 * Amarkal Options framework front end controller.
 */
Amarkal.Options   = {};

Amarkal.Options.formID = 'ao-form';

Amarkal.Options.init = function()
{   
    // Initiate sections
    Amarkal.Options.Sections.init();

    // Form control buttons
    $('.form-control-button').click(function(e){
        e.preventDefault();
        e.stopPropagation();
        Amarkal.Options[$(this).attr('data-action')]();
    });
    
    // Display notifications
    var notifications = Amarkal.Options.State.get('notifications');
    for( var i = 0; i < notifications.length && notifications; i++ )
    {
        Amarkal.Notifier.notify( notifications[i].message, notifications[i].type );
    }
    
    // Display errors
    var errors = Amarkal.Options.State.get('errors');
    for( var i = 0; i < errors.length && errors; i++ )
    {
        var section = Amarkal.Options.Sections.getByID(errors[i].section);
        section.addNotification(errors[i].message);
    }

    // Control menu toggle
    $('.amarkal-options .append-control-menu').click(function(e){
        e.preventDefault();
        e.stopPropagation();
        if( !$(this).parent().hasClass('active') )
        {
            $('.form-control-button').removeClass('active');
            $(this).parent().toggleClass('active');
        }
        else
        {
            $('.form-control-button').removeClass('active');
        }
    });
    
    // Show help tooltips
    $('[data-type="help"]').tooltip({
        delay: { show: 0, hide: 250 }
    });
};

Amarkal.Options.save = function()
{
    Amarkal.Options.State.set( 'action', 'save' );
    Amarkal.Options.submit();
};

Amarkal.Options.reset = function()
{
    Amarkal.Options.State.set( 'action', 'reset-all' );
    Amarkal.Options.submit();
};

Amarkal.Options.resetSection = function()
{
    Amarkal.Options.State.set( 'action', 'reset-section' );
    Amarkal.Options.submit();
};

Amarkal.Options.export = function()
{
    Amarkal.Notifier.success('This feature is not yet implemented.');
};

Amarkal.Options.exportAs = function()
{
    Amarkal.Notifier.success('This feature is not yet implemented.');
};

Amarkal.Options.import = function()
{
    Amarkal.Notifier.success('This feature is not yet implemented.');
};

Amarkal.Options.submit = function()
{
    $('#'+Amarkal.Options.formID).submit();
};

/**
 * Implements an options page section.
 * 
 * @param {string} id The section id
 */
Amarkal.Options.Section = function( id )
{
    this.id         = id;
    this.button     = $('[data-section="'+this.id+'"]');
    this.triangleEl = $('<i class="fa fa-exclamation-triangle"></i>');
    this.circleEl   = $('<span class="number"></span>');
    this.noticePanel= $('#'+id).find('.section-notifications');
    this.notices    = [];
    this.updated    = []; // List of updated field ids
    this.subsections= []; // List of subsection ids (if exists)

    this.init();
};

/**
 * Initiate the section.
 */
Amarkal.Options.Section.prototype.init = function()
{
    this.button.append(this.triangleEl, this.circleEl);
    this.circleEl.hide();
    this.triangleEl.hide();
    var self = this;

    // Listen to change events on all inputs
    $('#'+this.id).find('.field-wrapper').change(function(){
        $(this).addClass('field-updated');
        self.updated.push($(this).attr('for'));
        $.unique(self.updated);
        self.circleEl.text(self.updated.length);
        self.circleEl.show();
    });

    // Check for subsections
    $('#'+this.id+' .sub-menu a').each(function(){      
        $(this).click(function(e){
            e.preventDefault();
            self.hideAllSubsections();
            self.showSubsection($(this).attr('href'));
        });
        self.subsections.push($(this).attr('href'));
    });

    // Show the first subsection
    this.hideAllSubsections();
    this.showSubsection( this.subsections[0] );
};

/**
 * Show this section.
 * This function does not hide other sections.
 */
Amarkal.Options.Section.prototype.show = function()
{
    Amarkal.Options.State.set( 'active_section', this.id );
    this.button.addClass('active');
    $('#'+this.id).show();
    Amarkal.UI.refresh();
};

/**
 * Hide this section.
 */
Amarkal.Options.Section.prototype.hide = function()
{
    this.button.removeClass('active');
    $('#'+this.id).hide();
};

/**
 * Show the subsection with the given ID.
 * 
 * @param {string} id The subsection id.
 */
Amarkal.Options.Section.prototype.showSubsection = function( id )
{
    $('[href="'+id+'"]').addClass('active');
    $('[data-subsection="'+id+'"]').show();
    Amarkal.UI.refresh();
};

/**
 * Hide all subsections for this section. 
 * Pretty self explanatory, isn't it?
 */
Amarkal.Options.Section.prototype.hideAllSubsections = function()
{
    $('#'+this.id+' .sub-menu a').each(function(){
        $(this).removeClass('active');
        $('[data-subsection="'+$(this).attr('href')+'"]').hide();
    });
};

/**
 * Add a notification for this section.
 * 
 * @param {string} message The message to show in the notification.
 */
Amarkal.Options.Section.prototype.addNotification = function( message )
{
    this.notices.push( message );
    this.triangleEl.show();
    var html = '';
    for( var i = 0; i < this.notices.length; i++ )
    {
        html += '<p>'+this.notices[i]+'</p>';
    }
    this.noticePanel.html(html);
};

/**
 * Clear all notifications for this section.
 */
Amarkal.Options.Section.prototype.clearNotifications = function()
{
    this.triangleEl.hide();
    this.notices = [];
};
/**
 * Static class that provides control over the option page sections.
 */
Amarkal.Options.Sections = {};

/**
 * List of Section objects representing all sections.
 * @type Section[]
 */
Amarkal.Options.Sections.sectionList = [];

/**
 * Initiate the sections of the options page.
 */
Amarkal.Options.Sections.init = function()
{
    // Generate sections
    $('.amarkal-options .section').each(function(){
        var section = new Amarkal.Options.Section( $(this).attr('id') );

        Amarkal.Options.Sections.sectionList.push( section );

        section.hide();
        if( section.id === Amarkal.Options.State.get('active_section') )
        {
            section.show();
        }
    });

    // Click event for section buttons
    $('[data-section]').click(function(e){
        e.preventDefault();
        Amarkal.Options.Sections.hideAll();
        Amarkal.Options.Sections.getByID( $(this).attr('data-section') ).show();

        // Change the form's action
        $('#'+Amarkal.Options.formID).attr('action', $(this).attr('href'));
    });
};

/**
 * Get a section by its ID (not including the # sign).
 * 
 * @param {string} sectionId
 * @returns {Amarkal.Options.Sections.getSection.section}
 */
Amarkal.Options.Sections.getByID = function( sectionId )
{
    for( var i = 0; i < Amarkal.Options.Sections.sectionList.length; i++ )
    {
        var section = Amarkal.Options.Sections.sectionList[i];
        if( section.id === sectionId )
        {
            return section;
        }
    }
};

/**
 * Hide all sections
 */
Amarkal.Options.Sections.hideAll = function()
{
    for( var i = 0; i < Amarkal.Options.Sections.sectionList.length; i++ )
    {
        Amarkal.Options.Sections.sectionList[i].hide();
    }
};
/**
 * A static object holding the current state for the options page.
 * 
 * The state object holds information about the current state (e.g. active section, 
 * action type etc...) and is used for communications between the front end 
 * and the back end.
 * 
 * The state data is stored as a json string to the input value with the id
 * #options-state
 */
Amarkal.Options.State = {};

/**
 * The id of the input element.
 * @type String
 */
Amarkal.Options.State.inputID = 'options-state';

/**
 * Holds current state data.
 */
Amarkal.Options.State.data = $.parseJSON( $('#'+Amarkal.Options.State.inputID).val() );

/**
 * Set a state parameter.
 * 
 * @param {string} param
 * @param {mixed} value
 */
Amarkal.Options.State.set = function( param, value )
{
    Amarkal.Options.State.data[param] = value;
    Amarkal.Options.State.update();
};

/**
 * Get a state parameter.
 * 
 * @param {string} param
 * @returns {mixed}
 */
Amarkal.Options.State.get = function( param )
{
    var data = Amarkal.Options.State.data;
    if( null !== data && data.hasOwnProperty(param) )
    {
        return data[param];
    }
    return false;
};

/**
 * Update the state object.
 */
Amarkal.Options.State.update = function()
{
    $('#options-state').val(JSON.stringify(Amarkal.Options.State.data));
};

/**
 * Amarkal UI namespace
 */
Amarkal.UI = {};

/**
 * Array of component objects
 * New objects can be added using Amarkal.UI.register
 * 
 * @type Array
 */
Amarkal.UI.components = [];

/**
 * Initiate All Amarkal UI components.
 */
Amarkal.UI.init = function()
{
    for( var i = 0; i < Amarkal.UI.components.length; i++ )
    {
        var component = Amarkal.UI.components[i];
        
        // Use the wrapper parameter for the DOM query
        $(component.wrapper).each(function(){
            component.init(this);
            
            // Trigger the change event and update the wrapper value attribute
            $(component.getInput(this)).change(function(){
                var wrap = $(this).parents('.afw-ui-component');
                    wrap.trigger('change');
                    wrap.attr('data-value',$(this).val()); // This value is used by composite components to generate the final value
            });
        });
    }
};

/**
 * Register a UI component type.
 * Registered components MUST be an object with the following properties:
 * <ul>
 *   <li><b>wrapper</b> <i>string</i> a query selector to the component's 
 *   wrapper</li>
 *   <li><b>getInput</b> <i>function</i> a function that accepts the components 
 *   wrapper as an argument and returns the component's input element or elements.
 *   This function is used to bind certain events to the component, such as the 
 *   change trigger.</li>
 *   <li><b>init</b> <i>function</i> a function that accepts the component's 
 *   wrapper as an argument and initiates the component</li>
 * </ul>
 * 
 * @param {object} obj
 */
Amarkal.UI.register = function( obj )
{
    Amarkal.UI.components.push(obj);
};

/**
 * Set the given value to the given component.
 * 
 * @param {Node} Amarkal UI component DOM Node
 */
Amarkal.UI.setValue = function( component, value )
{
    for( var i = 0; i < Amarkal.UI.components.length; i++ )
    {
        // Find the corresponding registered UI component script
        if( $(component).hasClass( Amarkal.UI.components[i].wrapper.replace('.','') ) )
        {
            Amarkal.UI.components[i].setValue( component, value );
        }
    }
};

/**
 * Get a UI component configuration object by a DOM Node.
 * 
 * @param {Node} component Amarkal UI component DOM Node
 */
Amarkal.UI.getComponent = function( component )
{
    for( var i = 0; i < Amarkal.UI.components.length; i++ )
    {
        // Find the corresponding registered UI component script
        if( $(component).hasClass( Amarkal.UI.components[i].wrapper.replace('.','') ) )
        {
            return Amarkal.UI.components[i];
        }
    }
    return null;
};

/**
 * Refresh UI components.
 * Some UI components run a special script when shown. This function
 * calls the 'onshow' function of the UI component, if applicable.
 */
Amarkal.UI.refresh = function()
{
    $.each(Amarkal.UI.components, function(i, c){
        if(c.hasOwnProperty('onShow'))
        {
            c.onShow();
        }
    });
};
Amarkal.UI.register({
    wrapper: '.afw-ui-component-checkbox',
    getInput: function( wrapper ) {
        return $(wrapper).children('input');
    },
    setValue: function( wrapper, value ) {
        $(wrapper).attr('data-value',value);
        this.getInput(wrapper).value = value;
        values = value.split(',');
        
        $(wrapper).children('label').each(function() {
            var input = $(this).children('input');
            input.prop('checked', $.inArray(input.val(),values) > -1);
        });
    },
    init: function( wrapper ) {
        $(wrapper).children('label').click(function()
        {
            var value = [];
            var parent = $(this).parent();
            var input = parent.children('input');

            if( $(wrapper).hasClass('afw-ui-component-disabled') )
            {
                return;
            }

            parent.find(':checked').each(function(){
                value.push( $(this).val() );
            });

            input.val(value);
            input.trigger('change');
        });
    }
});
Amarkal.UI.register({
    wrapper: '.afw-ui-component-code-editor',
    getInput: function( wrapper ) {
        return $(wrapper).children('textarea');
    },
    setValue: function( wrapper, value ) {
        $(wrapper).attr('data-value',value);
        this.getEditor($(wrapper).children('.afw-ui-ace-editor')[0]).setValue(value, 1);
    },
    setMode: function( wrapper, lang ) {
        // Set the editor's language dynamically
        this.getEditor($(wrapper).children('.afw-ui-ace-editor')[0]).getSession().setMode("ace/mode/"+lang);
    },
    getEditor: function( node ) {
        for( var i = 0; i < this.editors.length; i++ )
        {
            if( this.editors[i].container === node )
            {
                return this.editors[i];
            }
        }
        throw "Amarkal Framework: Ace editor could not be found";
    },
    init: function( wrapper ) {
        
        var node    = $(wrapper).children('.afw-ui-ace-editor'),
            theme   = node.attr('data-theme'),
            lang    = node.attr('data-lang'),
            editor  = ace.edit(node[0]);
        
        // Push each editor to the list of editors to be used later by onShow()
        this.editors.push(editor);
        
        ace.config.set('basePath', 'https://cdnjs.cloudflare.com/ajax/libs/ace/1.1.3/');
        editor.setTheme("ace/theme/"+theme);
        editor.getSession().setMode("ace/mode/"+lang);
        editor.setOptions({
            maxLines: Infinity
        });
        
        // Disabled editor
        if( node.hasClass('afw-ui-ace-editor-disabled') )
        {
            editor.setReadOnly(true);
            return;
        }
        
        // Since the onchange event only fires when bluring, 
        // form submission might not detect the new value. Hence this:
        var self = this;
        node.keyup(function(){
            $(this).parent().attr('data-value',editor.getValue());
            self.getInput(wrapper).val(editor.getValue());
        });
    },
    editors: [],
    onShow: function() {
        for( var i = 0; i < this.editors.length; i++ )
        {
            this.editors[i].resize();
            this.editors[i].renderer.updateFull();
        }
    }
});
Amarkal.UI.register({
    wrapper: '.afw-ui-composite-component',
    getInput: function( wrapper ) {
        return $(wrapper).children('input');
    },
    setValue: function( wrapper, value ) {
        // Can't reverse composite value into individual component values.
        throw "Composite components cannot dynamically change value";
    },
    init: function( wrapper ) {
        $(wrapper).find('.afw-ui-component').change(function(){
            var input       = $(this).parent().parent().children('input'),
                components  = $(this).parent().parent().find('.afw-ui-component'),
                template    = input.attr('data-template');
            
            // Update the composite component master value, using the template
            input.val(template);
            for( var i = 0; i < components.length; i++ )
            {
                var value = input.val(),
                    c     = $(components[i]);
                input.val(value.replace('<% '+c.attr('data-name')+' %>', c.attr('data-value')));
            }
        });
    }
});
Amarkal.UI.register({
    wrapper: '.afw-ui-component-content',
    getInput: function( wrapper ) {
        return false;
    },
    setValue: function( wrapper, value ) {},
    init: function( wrapper ) {},
    onShow: function() {
        // Resize the iframe's height to fit its content
        $(this.wrapper).each(function(){
            if( $(this).hasClass('afw-ui-component-ajaxified') && $(this).is(":visible") )
            {
                var iframe = $(this).find('.afw-ui-iframe');
                iframe.height( iframe.contents().find("html").outerHeight() );
            }
        });
        
    }
});
Amarkal.UI.register({
    wrapper: '.afw-ui-component-dropdown',
    getInput: function( wrapper ) {
        return $(wrapper).children('select');
    },
    setValue: function( wrapper, value ) {
        $(wrapper).attr('data-value',value);
        this.getInput(wrapper).select2("val", value);
    },
    init: function( wrapper ) {
        this.getInput(wrapper)
            .select2({width:'resolve'})
            .change(function(){
                // Fire change event
                $(this).parents('.afw-ui-component').trigger('change');
        });
    }
});
Amarkal.UI.register({
    wrapper: '.afw-ui-component-progressbar',
    getInput: function( wrapper ) {
        return false;
    },
    setValue: function( wrapper, value ) {
        var pb = $(wrapper).find('.progressbar'),
            max = parseFloat( pb.attr('data-max') ),
            width = (value/max)*100;
        $(wrapper).find('.progressbar-inner').css({width: width+'%'});
        $(wrapper).find('.progressbar-label').text(value+'/'+max);
    },
    init: function( wrapper ) {
        var pb = $(wrapper).find('.progressbar'),
            value = parseFloat( pb.attr('data-value') ),
            max = parseFloat( pb.attr('data-max') ),
            width = (value/max)*100,
            outer = $('<div></div>'),
            inner = $('<div></div>'),
            label = $('<div></div>');
        
        outer.addClass('progressbar-outer');
        inner.addClass('progressbar-inner').css({width: width+'%'});
        label.addClass('progressbar-label').text(value+'/'+max);
        
        outer.append(inner);
        pb.append(outer,label);
    }
});
Amarkal.UI.register({
    wrapper: '.afw-ui-component-slider',
    getInput: function( wrapper ) {
        return $(wrapper).children('input');
    },
    // value must be array if this is a range type slider
    setValue: function( wrapper, value ) {
        $(wrapper).attr('data-value',value);
        if( $(wrapper).attr('data-type') === 'range' )
        {
            $(wrapper).find('.slider').slider('values', value);
        }
        else
        {
            $(wrapper).find('.slider').slider('value', value);
        }
    },
    init: function( wrapper ) {
        
        var max = parseFloat( $(wrapper).attr('data-max') );
        var min = parseFloat( $(wrapper).attr('data-min') );
        var step = parseFloat( $(wrapper).attr('data-step') );
        var type = $(wrapper).attr('data-type');
        var disabled = $(wrapper).hasClass('afw-ui-component-disabled');

        if( type === 'range' )
        {
            var inputs = $(wrapper).find('input');

            $(wrapper).find('.slider').slider({
                min: min,
                max: max,
                step: step,
                range: true,
                disabled: disabled,
                values: [ parseInt( inputs[0].value ), parseInt( inputs[1].value )],
                slide: function( event, ui ) {
                    inputs[0].value = ui.values[0];
                    inputs[1].value = ui.values[1];
                    inputs.trigger('change');
                }
            });
        }
        else
        {
            var input = $(wrapper).find('input');

            $(wrapper).find('.slider').slider({
                min: min,
                max: max,
                step: step,
                range: type,
                disabled: disabled,
                value: parseInt( input.val() ),
                slide: function( event, ui ) {
                    input.val( ui.value );
                    input.trigger('change');
                }
            });
        }

        $(wrapper).find('.ui-slider-handle').html('<i class="fa fa-navicon fa-rotate-90"></i>');
    }
});
Amarkal.UI.register({
    wrapper: '.afw-ui-component-spinner',
    getInput: function( wrapper ) {
        return $(wrapper).find('input');
    },
    setValue: function( wrapper, value ) {
        $(wrapper).attr('data-value',value);
        this.getInput(wrapper).spinner( "value", value );
    },
    init: function( wrapper ) {
        var input    = this.getInput(wrapper);
        var max      = input.attr('data-max');
        var min      = input.attr('data-min');
        var step     = input.attr('data-step');
        var disabled = input.attr('disabled');

        input.spinner({
            min: min,
            max: max,
            step: step,
            disabled: disabled
        });

        $(wrapper).find('.ui-spinner-down').detach().insertBefore(input);
        $(wrapper).find('.ui-spinner-up').html('<i class="fa fa-chevron-right"></i>')
        $(wrapper).find('.ui-spinner-down').html('<i class="fa fa-chevron-left"></i>');

        // Fire change event
        $(wrapper).find('.ui-spinner-button').click(function(){
            input.trigger('change');
        });
    }
});
Amarkal.UI.register({
    wrapper: '.afw-ui-component-text',
    getInput: function( wrapper ) {
        return $(wrapper).children('input');
    },
    setValue: function( wrapper, value ) {
        $(wrapper).attr('data-value',value);
        this.getInput(wrapper).val( value );
        
    },
    init: function( wrapper ) {
        // Since the onchange event only fires when bluring, 
        // form submission might not detect the new value. Hence this:
        this.getInput(wrapper).keyup(function(){
            $(this).parent().attr('data-value',$(this).val());
        });
    }
});
Amarkal.UI.register({
    wrapper: '.afw-ui-component-textarea',
    getInput: function( wrapper ) {
        return $(wrapper).find('textarea');
    },
    setValue: function( wrapper, value ) {
        $(wrapper).attr('data-value',value);
        this.getInput(wrapper).val( value );
    },
    init: function( wrapper ) {
        this.getInput(wrapper).resizable({
            minHeight: 150,
            minWidth: 250
        });
        $(wrapper).find('.ui-resizable-s').html('<i class="fa fa-bars"></i>');
        $(wrapper).find('.ui-resizable-e').html('<i class="fa fa-bars fa-rotate-90"></i>');
    }
});
Amarkal.UI.register({
    wrapper: '.afw-ui-component-togglebutton',
    getInput: function( wrapper ) {
        return $(wrapper).children('input');
    },
    setValue: function( wrapper, value ) {
        $(wrapper).attr('data-value',value);
        this.getInput(wrapper).val(value);
        values = value.split(',');
        $(wrapper).children('label').each(function(){
            if( $.inArray($(this).attr('data-value'),values) > -1 )
            {
                $(this).addClass('active');
            }
            else
            {
                $(this).removeClass('active');
            }
        });
    },
    init: function( wrapper ) {
        $(wrapper).children('label').click(function()
        {
            var value = [];
            var parent = $(this).parent();
            var input = parent.children('input');

            if( input.attr('disabled') )
            {
                return;
            }
            
            if(parent.attr('data-multivalue') === 'false')
            {
                parent.find('label').removeClass('active');
            }
            $(this).toggleClass('active');

            parent.find('.active').each(function(){
                value.push( $(this).attr('data-value') );
            });

            input.val(value);
            input.trigger('change');
        });
    }
});
Amarkal.UI.register({
    wrapper: '.afw-ui-component-wp-attachment',
    getInput: function( wrapper ) {
        return $(wrapper).children('input');
    },
    setValue: function( wrapper, value ) {
        $(wrapper).attr('data-value',value);
        this.getInput(wrapper).value = value;
    },
    init: function( wrapper ) {
        // http://mikejolley.com/2012/12/using-the-new-wordpress-3-5-media-uploader-in-plugins/
        var file_frame,
            input = this.getInput(wrapper),
            title = $(wrapper).attr('data-uploader-title'),
            btn_text = $(wrapper).attr('data-uploader-button-text'),
            disabled = $(wrapper).hasClass('afw-ui-component-disabled'),
            multiple = $(wrapper).hasClass('afw-wp-multi-attachment') ? 'add' : false;

        $(wrapper).find('.afw-ui-attachment-button, .afw-ui-wp-attachments').click(function(e){
            e.preventDefault();
            
            if( disabled )
            {
                return;
            }
            
            // If the media frame already exists, reopen it.
            if ( file_frame ) 
            {
                file_frame.open();
                return;
            }

            // Create the media frame.
            file_frame = wp.media.frames.file_frame = wp.media({
                title: title,
                button: {
                    text: btn_text,
                },
                multiple: multiple
            });

            /**
             * Called when the media uploader is opened
             */
            file_frame.on('open',function() {
                var value = input.val();
                // Multiple attachments
                if( false !== multiple )
                {
                    var ids = value.split(',');
                    for( var i = 0; i < ids.length; i++ )
                    {
                        var attachment = wp.media.attachment(ids[i]);
                        attachment.fetch();
                        file_frame.state().get('selection').add(attachment);
                    }
                }
                // Single attachment
                else
                {
                    var attachment = wp.media.attachment(value);
                    attachment.fetch();
                    file_frame.state().get('selection').add(attachment);
                }
            });

            /**
             * Called when an attachment is selected
             */
            file_frame.on( 'select', function() {
                var selection = file_frame.state().get('selection');
                
                // Multiple attachments
                if( false !== multiple )
                {
                    var ids = [], imgs = [];
                    selection.map( function( attachment ) {
                        if( '' === attachment.id )
                        {
                            return;
                        }
                        
                        attachment = attachment.toJSON();
                        ids.push(attachment.id);
                        imgs.push(attachment.type === 'image' ? attachment.url : attachment.icon);
                    });
                    update_images( imgs );
                    input.val( ids.join(',') );
                }
                
                // Single attachment
                else
                {
                    var attachment = selection.first().toJSON();
                    var img = attachment.type === 'image' ? attachment.url : attachment.icon;
                    update_images( [img] );
                    input.val( attachment.id );
                }
                
                input.trigger('change');
            });

            // Finally, open the modal
            file_frame.open();
        });
        
        /**
         * Update the attachments images/icons
         * 
         * @param {array} imgs Array of images
         */
        function update_images( imgs )
        {
            $(wrapper).children('.afw-ui-wp-attachments').html('');
            imgs.map(function(img){
                $(wrapper).children('.afw-ui-wp-attachments').append('<div class="afw-ui-wp-attachment"><img src="'+img+'"></div>');
            });
        }
    }
});
Amarkal.UI.register({
    wrapper: '.afw-ui-component-wp-editor',
    getInput: function( wrapper ) {
        return $(wrapper).find('textarea');
    },
    setValue: function( wrapper, value ) {
        $(wrapper).attr('data-value',value);
        this.getInput(wrapper).val( value );
    },
    init: function( wrapper ) {
        
    }
});
/**
 * Editor namespace
 */
Amarkal.Editor = {};
/**
 * Implements a floating toolbar for the TinyMCE visual editor.
 * Most of this code is a reformatted version of the code seen at
 * wp-includes/js/tinymce/plugins/wpeditimage/plugin.js
 */
Amarkal.Editor.FloatingToolbar = function( editor, settings ) 
{
    this.settings = settings;
    this.editor = editor;
    this.init();
};

Amarkal.Editor.FloatingToolbar.prototype.init = function() 
{
    var floatingToolbar, serializer,
        editor = this.editor,
        DOM = tinymce.DOM,
        settings = editor.settings,
        Factory = tinymce.ui.Factory,
        iOS = tinymce.Env.iOS,
        toolbarIsHidden = true,
        self = this,
        editorWrapParent = tinymce.$( '#postdivrich' );

    function isPlaceholder( node ) {
        return !! ( editor.dom.getAttrib( node, 'data-mce-placeholder' ) || editor.dom.getAttrib( node, 'data-mce-object' ) );
    }
    
    function isSelectorElement( node )
    {
        return node && ( tinymce.$(node).is( self.settings.selector) || tinymce.$(node).parents(self.settings.selector).length !== 0 );
    }

    var i = this.settings.buttons.length;
    while( i-- )
    {
        var button = this.settings.buttons[i];
        editor.addButton( button.slug, {
            tooltip: button.tooltip,
            icon: button.icon,
            onclick: button.onclick
        } );
    }

    floatingToolbar = Factory.create( this.toolbarConfig() ).renderTo( document.body ).hide();

    floatingToolbar.reposition = function() {
        var top, left, minTop, className,
            windowPos, adminbar, mceToolbar, boundary,
            boundaryMiddle, boundaryVerticalMiddle, spaceTop,
            spaceBottom, windowWidth, toolbarWidth, toolbarHalf,
            iframe, iframePos, iframeWidth, iframeHeigth,
            toolbarNodeHeight, verticalSpaceNeeded,
            toolbarNode = this.getEl(),
            buffer = 5,
            margin = 8,
            adminbarHeight = 0,
            node = editor.selection.getNode();
    
        if ( !isSelectorElement( node ) ) {
            return this;
        }
        
        // If this is a child of the real element, select its parent
        if( !tinymce.$(node).is( self.settings.selector) )
        {
            node = tinymce.$(node).parents(self.settings.selector)[0];
        }

        windowPos = window.pageYOffset || document.documentElement.scrollTop;
        adminbar = tinymce.$( '#wpadminbar' )[0];
        mceToolbar = tinymce.$( '.mce-tinymce .mce-toolbar-grp' )[0];
        boundary = node.getBoundingClientRect();
        boundaryMiddle = ( boundary.left + boundary.right ) / 2;
        boundaryVerticalMiddle = ( boundary.top + boundary.bottom ) / 2;
        spaceTop = boundary.top;
        spaceBottom = iframeHeigth - boundary.bottom;
        windowWidth = window.innerWidth;
        toolbarWidth = toolbarNode.offsetWidth;
        toolbarHalf = toolbarWidth / 2;
        iframe = editor.getContentAreaContainer().firstChild;
        iframePos = DOM.getPos( iframe );
        iframeWidth = iframe.offsetWidth;
        iframeHeigth = iframe.offsetHeight;
        toolbarNodeHeight = toolbarNode.offsetHeight;
        verticalSpaceNeeded = toolbarNodeHeight + margin + buffer;

        if ( iOS ) {
            top = boundary.top + iframePos.y + margin;
        } else {
            if ( spaceTop >= verticalSpaceNeeded ) {
                className = ' mce-arrow-down';
                top = boundary.top + iframePos.y - toolbarNodeHeight - margin;
            } else if ( spaceBottom >= verticalSpaceNeeded ) {
                className = ' mce-arrow-up';
                top = boundary.bottom + iframePos.y;
            } else {
                top = buffer;

                if ( boundaryVerticalMiddle >= verticalSpaceNeeded ) {
                    className = ' mce-arrow-down';
                } else {
                    className = ' mce-arrow-up';
                }
            }
        }

        // Make sure the image toolbar is below the main toolbar.
        if ( mceToolbar ) {
            minTop = DOM.getPos( mceToolbar ).y + mceToolbar.clientHeight;
        } else {
            minTop = iframePos.y;
        }

        // Make sure the image toolbar is below the adminbar (if visible) or below the top of the window.
        if ( windowPos ) {
            if ( adminbar && adminbar.getBoundingClientRect().top === 0 ) {
                adminbarHeight = adminbar.clientHeight;
            }

            if ( windowPos + adminbarHeight > minTop ) {
                minTop = windowPos + adminbarHeight;
            }
        }

        if ( top && minTop && ( minTop + buffer > top ) ) {
            top = minTop + buffer;
            className = '';
        }

        left = boundaryMiddle - toolbarHalf;
        left += iframePos.x;

        if ( toolbarWidth >= windowWidth ) {
            className += ' mce-arrow-full';
            left = 0;
        } else if ( ( left < 0 && boundary.left + toolbarWidth > windowWidth ) ||
            ( left + toolbarWidth > windowWidth && boundary.right - toolbarWidth < 0 ) ) {

            left = ( windowWidth - toolbarWidth ) / 2;
        } else if ( left < iframePos.x ) {
            className += ' mce-arrow-left';
            left = boundary.left + iframePos.x;
        } else if ( left + toolbarWidth > iframeWidth + iframePos.x ) {
            className += ' mce-arrow-right';
            left = boundary.right - toolbarWidth + iframePos.x;
        }

        if ( ! iOS ) {
            toolbarNode.className = toolbarNode.className.replace( / ?mce-arrow-[\w]+/g, '' );
            toolbarNode.className += className;
        }

        DOM.setStyles( toolbarNode, { 'left': left, 'top': top } );

        return this;
    };

    if ( iOS ) {
        // Safari on iOS fails to select image nodes in contentEditoble mode on touch/click.
        // Select them again.
        editor.on( 'click', function( event ) {
            if ( isSelectorElement( node ) ) {
                var node = event.target;

                window.setTimeout( function() {
                    editor.selection.select( node );
                }, 200 );
            } else {
                floatingToolbar.hide();
            }
        });
    }

    editor.on( 'nodechange', function( event ) {
        var delay = iOS ? 350 : 100;

        if (  !isSelectorElement( event.element ) || isPlaceholder( event.element ) ) {
            floatingToolbar.hide();
            return;
        }

        setTimeout( function() {
            var element = editor.selection.getNode();

            if ( isSelectorElement( element ) && ! isPlaceholder( element ) ) {
                if ( floatingToolbar._visible ) {
                    floatingToolbar.reposition();
                } else {
                    floatingToolbar.show();
                }
            } else {
                floatingToolbar.hide();
            }
        }, delay );
    } );

    function hide() {
        if ( ! toolbarIsHidden ) {
            floatingToolbar.hide();
        }
    }

    floatingToolbar.on( 'show', function() {
        toolbarIsHidden = false;

        if ( this._visible ) {
            this.reposition();
            DOM.addClass( this.getEl(), 'mce-inline-toolbar-grp-active' );
        }
    } );

    floatingToolbar.on( 'hide', function() {
        toolbarIsHidden = true;
        DOM.removeClass( this.getEl(), 'mce-inline-toolbar-grp-active' );
    } );

    floatingToolbar.on( 'keydown', function( event ) {
        if ( event.keyCode === 27 ) {
            hide();
            editor.focus();
        }
    } );

    DOM.bind( window, 'resize scroll', function() {
        if ( ! toolbarIsHidden && editorWrapParent.hasClass( 'wp-editor-expand' ) ) {
            hide();
        }
    });

    editor.on( 'init', function() {
        editor.dom.bind( editor.getWin(), 'scroll', hide );
    });

    editor.on( 'blur hide', hide );

    // 119 = F8
    editor.shortcuts.add( 'Alt+119', '', function() {
        var node = floatingToolbar.find( 'toolbar' )[0];

        if ( node ) {
            node.focus( true );
        }
    });
};

Amarkal.Editor.FloatingToolbar.prototype.toolbarConfig = function() 
{
    var toolbarItems = [],
        Factory = tinymce.ui.Factory,
        editor = this.editor,
        settings = editor.settings,
        buttonGroup;

    tinymce.each( this.settings.buttons, function( button ) {
        var itemName,
            item = button.slug;

        function bindSelectorChanged() {
            var selection = editor.selection;

            if ( item.settings.stateSelector ) {
                selection.selectorChanged( item.settings.stateSelector, function( state ) {
                    item.active( state );
                }, true );
            }

            if ( item.settings.disabledStateSelector ) {
                selection.selectorChanged( item.settings.disabledStateSelector, function( state ) {
                    item.disabled( state );
                } );
            }
        }

        if ( item === '|' ) {
            buttonGroup = null;
        } else {
            if ( Factory.has( item ) ) {
                item = {
                    type: item
                };

                if ( settings.toolbar_items_size ) {
                    item.size = settings.toolbar_items_size;
                }

                toolbarItems.push( item );

                buttonGroup = null;
            } else {
                if ( ! buttonGroup ) {
                    buttonGroup = {
                        type: 'buttongroup',
                        items: []
                    };

                    toolbarItems.push( buttonGroup );
                }

                if ( editor.buttons[ item ] ) {
                    itemName = item;
                    item = editor.buttons[ itemName ];

                    if ( typeof item === 'function' ) {
                        item = item();
                    }

                    item.type = item.type || 'button';

                    if ( settings.toolbar_items_size ) {
                        item.size = settings.toolbar_items_size;
                    }

                    item = Factory.create( item );
                    buttonGroup.items.push( item );

                    if ( editor.initialized ) {
                        bindSelectorChanged();
                    } else {
                        editor.on( 'init', bindSelectorChanged );
                    }
                }
            }
        }
    } );

    return {
        type: 'panel',
        layout: 'stack',
        classes: 'toolbar-grp inline-toolbar-grp wp-image-toolbar',
        ariaRoot: true,
        ariaRemember: true,
        items: [
            {
                type: 'toolbar',
                layout: 'flow',
                items: toolbarItems
            }
        ]
    };
};
/**
 * Implements a popup form for the tinymce popup window.
 */
Amarkal.Editor.Form = function() {};

/**
 * This function opens an ajax popup with a form based on the Amarkal UI framework.
 * The param.url parameter should specify an ajax script registered by wordpress
 * 'wp_ajax_*' action. The script should have the rendered UI.
 * 
 * @see Amarkal\Extensions\WordPress\Editor\Plugins\Form
 * 
 * @param {type} editor The TinyMCE editor from which the popup will be called.
 * @param {object} params
 * 
 * <b>Parameters</b>
 * <ul>
 * <li><b>title</b> <i>string</i> The popup's title.</li>
 * <li><b>url</b> <i>string</i> The Popup's iframe url.</li>
 * <li><b>width</b> <i>string</i> The popup's width.</li>
 * <li><b>height</b> <i>string</i> The popup's height.</li>
 * <li><b>template</b> <i>string</i> The template (will be inserted to the current active editor)</li>
 * <li><b>values</b> <i>object</i> A list of initial values for the form UI components (overrides the default values)</li>
 * <li><b>on_insert</b> <i>function</i> A callback function to be called once the insert button is clicked.</li>
 * <li><b>on_init</b> <i>function</i> A callback function to be called once the insert button is clicked.</li>
 * </ul>
 */
Amarkal.Editor.Form.open = function( editor, p )
{   
    // Merge with defaults
    var params = Amarkal.Utility.extend( Amarkal.Editor.Form.defaults(), p);
    
    editor.windowManager.open({
        title: params.title,
        url: params.url,
        width: params.width,
        height: params.height,
        buttons: [{
            text: 'Insert',
            classes: 'widget btn primary first abs-layout-item',
            disabled: false,
            onclick: function(e){
                var iframe = $('iframe[src$="'+params.url+'"]').contents();
                var values = {};
                iframe.find('.afw-ui-component').each(function(){
                    var name  = $(this).attr('data-name');
                    var value = $(this).attr('data-value') == 'undefined' ? '' : $(this).attr('data-value');
                    values[name] = value;
                });
                
                // Call the callback
                params.on_insert( editor, values );
                
                editor.windowManager.close();
            }
        }, 
        {
            text: 'Close',
            onclick: function() {editor.windowManager.close();}
        }]
    },
        /**
         * Pass parameters to the popup. 
         * @see http://www.tinymce.com/wiki.php/Tutorials:Creating_custom_dialogs 
         */
        params 
    );
};

/**
 * 
 * @returns {Amarkal.Editor.Form.defaults.FormAnonym$5}
 */
Amarkal.Editor.Form.defaults = function()
{
    return {
        title:      '',
        url:        '',
        width:      500,
        height:     500,
        template:   '',
        on_init:    function() {},
        on_insert:  function( editor, values ) {
            // Default function
            var args = editor.windowManager.getParams();
            editor.insertContent( Amarkal.Editor.Form.parseTemplate( args.template, values ) );
        },
        values:     {}
    };
};

/**
 * Initiate the popup form.
 * This is called once the popup iframe has been loaded.
 * @see Outro.js
 */
Amarkal.Editor.Form.init = function()
{
    // Only initiate if a popup for exists
    var form = $('.afw-editor-popup-form');
    
    if( 0 !== form.length ) 
    {
        var args = top.tinymce.activeEditor.windowManager.getParams()
        
        this.setValues();
        args.on_init( window ); // Need to pass iframe context, since the on_init function is declared in a different scope.
    }       
};

/**
 * Set UI components values using the values passed to the windowManager
 */
Amarkal.Editor.Form.setValues = function()
{
    var values = top.tinymce.activeEditor.windowManager.getParams().values;
    
    if( typeof values !== 'undefined' )
    {
        $('.afw-editor-popup-form').find('.afw-ui-component').each(function()
        {
            var name = $(this).attr('data-name');
            if( values.hasOwnProperty( name ) )
            {
                Amarkal.UI.setValue( this, values[name] );
            }
        });
    }
};

/**
 * Parse a given template, replacing the placeholders with the given values.
 * Placeholders are specified using the notation <% placeholder_name %>.
 * The value 'values.placeholder_name' will replace the placeholder.
 * 
 * @param {string} template
 * @param {object} values
 * @returns {string} parsed template.
 */
Amarkal.Editor.Form.parseTemplate = function( template, values )
{
    return template.replace(/(<%([^\%\<\>]*)%>)/g,function replacer( match, p1, p2 ) 
    {
        return values[p2.trim()];
    });
};
/**
 * Amarkal Widget framework
 */
Amarkal.Widget    = {};

Amarkal.Widget.init = function() 
{
    if( !$('body').hasClass('widgets-php') )
    {
        return;
    }
    
    $(document).trigger('widget_init');
    Amarkal.Widget.setAjaxListener();
    
    $(document).bind('widget_init', function(event, widget){
        // Set tooltips on widgets
        $('[data-type="help"]').tooltip({
            delay: { show: 0, hide: 250 }
        });
        // Rebind UI component scripts after save
        Amarkal.UI.init();
    });
}

Amarkal.Widget.setAjaxListener = function() 
{
    // Trigger an event after widget save/drag/load.
    // @see http://wordpress.stackexchange.com/questions/5515/update-widget-form-after-drag-and-drop-wp-save-bug
    $( document ).ajaxComplete( function( event, XMLHttpRequest, ajaxOptions ) {
        var request = {}, pairs = ajaxOptions.data.split('&'), i, split, widget;
        for( i in pairs ) {
                split = pairs[i].split( '=' );
                request[decodeURIComponent( split[0] )] = decodeURIComponent( split[1] );
        }

        if( request.action && ( request.action === 'save-widget' ) ) 
        {
            widget = $('input.widget-id[value="' + request['widget-id'] + '"]').parents('.widget');
            if( !XMLHttpRequest.responseText )
            {
                wpWidgets.save(widget, 0, 1, 0);
            }
            else
            {
                $(document).trigger('widget_init', widget);
            }
        }
    });
};

Amarkal.Widget.init();

    Amarkal.UI.init();
    Amarkal.Options.init();
    Amarkal.Editor.Form.init();
});

